
This directory is intended for project header files.

A header file is a file containing C declarations and macro definitions
to be shared between several project source files. You request the use of a
header file in your project source file (C, C++, etc) located in `src` folder
by including it, with the C preprocessing directive `#include'.

```src/main.c

#include "header.h"

int main (void)
{
 ...
}
```

Including a header file produces the same results as copying the header file
into each source file that needs it. Such copying would be time-consuming
and error-prone. With a header file, the related declarations appear
in only one place. If they need to be changed, they can be changed in one
place, and programs that include the header file will automatically use the
new version when next recompiled. The header file eliminates the labor of
finding and changing all the copies as well as the risk that a failure to
find one copy will result in inconsistencies within a program.

In C, the convention is to give header files names that end with `.h'.

Read more about using header files in official GCC documentation:

* Include Syntax
* Include Operation
* Once-Only Headers
* Computed Includes

https://gcc.gnu.org/onlinedocs/cpp/Header-Files.html

├── include/
│   ├── config.h              // 전역 설정 및 핀 정의
│   ├── MotorController.h     // 모터 제어 클래스
│   ├── EncoderManager.h      // 인코더 관리 클래스
│   ├── BluetoothManager.h    // BLE 통신 관리 클래스
│   ├── DisplayManager.h      // OLED 디스플레이 관리 클래스
│   └── CommandProcessor.h    // 명령 처리 클래스
├── src/
│   ├── main.cpp              // 메인 함수
│   ├── MotorController.cpp   // 모터 제어 구현
│   ├── EncoderManager.cpp    // 인코더 관리 구현
│   ├── BluetoothManager.cpp  // BLE 통신 구현
│   ├── DisplayManager.cpp    // OLED 디스플레이 구현
│   └── CommandProcessor.cpp  // 명령 처리 구현
└── platformio.ini            // PlatformIO 설정

MotorController: 모터 제어 전담
EncoderManager: 인코더 데이터 관리 (싱글톤 패턴)
BluetoothManager: BLE 통신 전담
DisplayManager: OLED 디스플레이 관리
CommandProcessor: 명령 해석 및 처리